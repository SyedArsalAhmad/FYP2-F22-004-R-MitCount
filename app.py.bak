from flask import Flask, render_template, request, flash,redirect,session,url_for
import mysql.connector
import cv2 as cv
import numpy as np
import tensorflow as tf

import torch
import torchvision.transforms as transforms
import torchvision.models as models
import cv2

app = Flask(__name__)
app.secret_key = "123"

# MySQL configuration
mysql_host = 'localhost'
mysql_user = 'root'
mysql_password = ''
mysql_db = 'mbilal'
conn = mysql.connector.connect(host=mysql_host, user=mysql_user, password=mysql_password, database=mysql_db)
cursor = conn.cursor()


@app.route('/')
def index():
    return render_template('mylogin.html')
@app.route('/mylogin')
def signup():
    return render_template('myform.html')
@app.route('/myform')
def signin():
    return render_template('mylogin.html')
@app.route('/Records')
def Records():
    cursor.execute("SELECT * FROM patients")
    data = cursor.fetchall()
    return render_template('Records.html', data=data)


@app.route('/Home')
def Home():
    return render_template('index.html')

@app.route('/mylogin', methods=['POST','GET'])
def mylogin():
    email = request.form['email']
    password = request.form['password']
    query = "SELECT * FROM user WHERE email = %s AND password = %s"
    values = (email, password)
    cursor.execute(query, values)
    user = cursor.fetchone()

    if user:
        flash('Valid Email or password','matched')
        return render_template('index.html')

    else:
        flash('Email and password do not match', 'error')
        return render_template('mylogin.html')



@app.route('/register', methods=['POST', 'GET'])
def register():
    name = request.form['name']
    email = request.form['email']
    password = request.form['password']
    query = "INSERT INTO user (name, email, password) VALUES (%s, %s, %s)"
    values = (name, email, password)
    cursor.execute(query, values)
    conn.commit()

    return render_template('index.html')


@app.route('/login')
def login():
    message = request.args.get('message')
    return render_template('mylogin.html', message=message)


@app.route('/submit-form', methods=['POST'])
def handle_form_submission():
    if request.method == "POST":
        myImageFile = request.files['file'] 

        img = request.files['file'].read()

        file_bytes = np.frombuffer(img, np.uint8)
        # img = cv.imdecode(file_bytes, cv.IMREAD_UNCHANGED)

        model = models.detection.fasterrcnn_resnet50_fpn(pretrained=True)

        # Set the device to use
        device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
        model.to(device)

        # Define the transform to be applied to the input image
        transform = transforms.Compose([
            transforms.ToTensor()
        ])

        # Read the input image
        img = cv.imdecode(file_bytes, cv.IMREAD_UNCHANGED)

        img1 = img
        # Convert the image from OpenCV format to PyTorch tensor format
        img_tensor = transform(img).to(device)

        # Make a prediction on the input image
        model.eval()
        with torch.no_grad():
            prediction = model([img_tensor])

        # Get the predicted boxes and labels
        boxes = prediction[0]['boxes'].cpu().numpy()
        labels = prediction[0]['labels'].cpu().numpy()

        # Draw rectangles around the detected objects
        for i in range(len(boxes)):
            x1, y1, x2, y2 = boxes[i]
            label = labels[i]
            if label == 1:  # Class ID 1 corresponds to 'person'
                cv.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)

        # Get the form data
        name = request.form.get('name')
        patient_id = request.form.get('id')
        patientImageName = myImageFile.filename
        patientImageResultsName = "resultant " + patientImageName

        cv.imwrite("static/upload_images/" + patientImageName, img1)
        cv.imwrite("static/results_images/" + patientImageResultsName, img)

        # store image to respective folders in static folder
        
        print("Hassan")
        query = "INSERT INTO patients (patient_id, name, uploaded_image, results_image) VALUES (%s, %s, %s, %s)"
        values = (patient_id, name, patientImageName, patientImageResultsName)
        cursor.execute(query, values)
        print("HassanRana")
        conn.commit()

        # # Create a dictionary with the form data
        # form_data = {'Name': name, 'Email': email, 'Result' : result}
        
        # # Print the form data as key-value pairs
        # for key, value in form_data.items():
        #     print(f'{key}: {value}')

        #result = 0
    return redirect('Home')
    # return render_template('index.html', result=result)



# @app.route("/upload_image", methods=['POST', 'GET'])
# def upload_image(): 
#     print("OYEEEEEEEEEEEEEEEEEEEE")
#     if request.method == "POST":
#         img = request.files['file'].read()

#         file_bytes = np.frombuffer(img, np.uint8)
#         img = cv.imdecode(file_bytes, cv.IMREAD_UNCHANGED)
#         # img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
#         input_image = img
#         # Get the input and output details of the model
#         # interpreter = tf.lite.Interpreter(
#         #   "url_for('static', filename='/model/model.tflite'")
#         interpreter = tf.lite.Interpreter(model_path="model.tflite")
#         interpreter.allocate_tensors()
#         input_details = interpreter.get_input_details()
#         output_details = interpreter.get_output_details()

#         # Determine the required input size of the model
#         input_shape = input_details[0]['shape'][1:3]

#         # Resize the input image to the required size
#         input_image = np.copy(input_image)
#         input_image = cv.resize(input_image, input_shape)

#         # Convert the input image to a NumPy array
#         input_data = np.array(input_image, dtype=np.float32) / 255.0

#         # Add an extra dimension to the input data for batch size
#         input_data = np.expand_dims(input_data, axis=0)

#         # Set the input tensor
#         interpreter.set_tensor(input_details[0]['index'], input_data)

#         # Run the inference
#         interpreter.invoke()

#         # Get the output tensor
#         output_data = interpreter.get_tensor(output_details[0]['index'])
#         result = np.argmax(output_data)

#         # result = 123
#         # Print the result
#         print("The mitcount is:", result)

#         # cv.imshow("MyImage", img)
#         # cv.waitKey(-1)
#         # cv.destroyAllWindows()

#         flash("Method")
#     print("Error")
#     return render_template('index.html', result=result)


if __name__ == '__main__':
    app.run(debug=True)
# from flask import Flask, render_template, request, redirect, url_for, flash

# import numpy as np
# import cv2 as cv

# app = Flask(__name__)

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route("/detect", methods=["POST", "GET"])
# def detection():
#     if request.method == "POST":
#         img = request.files['file'].read()
#         file_type = request.form.get('file_type')

#         file_bytes = np.frombuffer(img, np.uint8)
#         img = cv.imdecode(file_bytes, cv.IMREAD_UNCHANGED)
#         if file_type == "image":
#             img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
#             cv.imshow("MyImage", img)

#         cv.imshow("MyImage", img)
#         cv.waitKey(-1)
#         cv.destroyAllWindows()

#         flash("Method")
#         return render_template('home.html')

#     flash("Invalid Method")
#     return redirect(url_for('index'))

# if __name__ == '__main__':
#     app.run(debug=True)


# @app.route('/', methods=['POST'])
# def upload_image():
#     # Get the uploaded image file from the form
#     image = request.files['image'].read()

#     # Convert the image file to a numpy array
#     npimg = np.frombuffer(image, np.uint8)
#     img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

#     # Print the shape of the image to the terminal
#     print(img.shape)

#     return 'Image uploaded successfully'
